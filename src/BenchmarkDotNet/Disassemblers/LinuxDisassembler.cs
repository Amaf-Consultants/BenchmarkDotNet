using System.IO;
using System.Xml.Serialization;
using BenchmarkDotNet.Disassembler;
using JetBrains.Annotations;

namespace BenchmarkDotNet.Diagnosers 
{
    internal class LinuxDisassembler
    {
        private readonly bool printAsm, printIL, printSource, printPrologAndEpilog;
        private readonly int recursiveDepth;

        [PublicAPI]
        public LinuxDisassembler(DisassemblyDiagnoserConfig config)
        {
            printIL = config.PrintIL;
            printAsm = config.PrintAsm;
            printSource = config.PrintSource;
            printPrologAndEpilog = config.PrintPrologAndEpilog;
            recursiveDepth = config.RecursiveDepth;
        }

        [PublicAPI]
        public DisassemblyResult Disassemble(DiagnoserActionParameters parameters)
        {
            var settings = BuildDisassemblerSettings(parameters);
            
            var disassembledMethods =  Program.Disassemble(settings);

            return Map(disassembledMethods);

        }

        private Settings BuildDisassemblerSettings(DiagnoserActionParameters parameters)
        {
            return new Settings(
                processId: parameters.Process.Id,
                typeName: $"BenchmarkDotNet.Autogenerated.Runnable_{parameters.BenchmarkId.Value}",
                methodName: DisassemblerConstants.DisassemblerEntryMethodName,
                printAsm: printAsm,
                printIL: printIL,
                printSource: printSource,
                printPrologAndEpilog: printPrologAndEpilog,
                recursiveDepth: recursiveDepth,
                resultsPath: default
            );
        }

        private static BenchmarkDotNet.Diagnosers.DisassemblyResult Map(BenchmarkDotNet.Disassembler.DisassembledMethod[] disassembledMethods)
        {
            var result = new BenchmarkDotNet.Disassembler.DisassemblyResult()
            {
                Methods = disassembledMethods
            };

            var fromSerializer = new XmlSerializer(typeof(BenchmarkDotNet.Disassembler.DisassemblyResult));
            var toSerializer  = new XmlSerializer(typeof(BenchmarkDotNet.Diagnosers.DisassemblyResult));
            
            using (var stream = new MemoryStream())
            {
                fromSerializer.Serialize(stream, result);

                stream.Position = 0;
                
                return (DisassemblyResult)toSerializer.Deserialize(stream);
            }
        }
    }
}